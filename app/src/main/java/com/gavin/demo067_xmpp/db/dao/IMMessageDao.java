package com.gavin.demo067_xmpp.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.gavin.demo067_xmpp.model.IMMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IMMESSAGE".
*/
public class IMMessageDao extends AbstractDao<IMMessage, Long> {

    public static final String TABLENAME = "IMMESSAGE";

    /**
     * Properties of entity IMMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _Id = new Property(0, Long.class, "_Id", true, "_id");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property PassName = new Property(3, String.class, "passName", false, "PASS_NAME");
        public final static Property Time = new Property(4, long.class, "time", false, "TIME");
        public final static Property Content = new Property(5, String.class, "content", false, "CONTENT");
        public final static Property Type = new Property(6, int.class, "type", false, "TYPE");
        public final static Property Source = new Property(7, int.class, "source", false, "SOURCE");
        public final static Property Status = new Property(8, int.class, "status", false, "STATUS");
        public final static Property Master = new Property(9, String.class, "master", false, "MASTER");
    }


    public IMMessageDao(DaoConfig config) {
        super(config);
    }
    
    public IMMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IMMESSAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _Id
                "\"ID\" TEXT UNIQUE ," + // 1: id
                "\"NAME\" TEXT," + // 2: name
                "\"PASS_NAME\" TEXT," + // 3: passName
                "\"TIME\" INTEGER NOT NULL ," + // 4: time
                "\"CONTENT\" TEXT," + // 5: content
                "\"TYPE\" INTEGER NOT NULL ," + // 6: type
                "\"SOURCE\" INTEGER NOT NULL ," + // 7: source
                "\"STATUS\" INTEGER NOT NULL ," + // 8: status
                "\"MASTER\" TEXT);"); // 9: master
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IMMESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IMMessage entity) {
        stmt.clearBindings();
 
        Long _Id = entity.get_Id();
        if (_Id != null) {
            stmt.bindLong(1, _Id);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String passName = entity.getPassName();
        if (passName != null) {
            stmt.bindString(4, passName);
        }
        stmt.bindLong(5, entity.getTime());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(6, content);
        }
        stmt.bindLong(7, entity.getType());
        stmt.bindLong(8, entity.getSource());
        stmt.bindLong(9, entity.getStatus());
 
        String master = entity.getMaster();
        if (master != null) {
            stmt.bindString(10, master);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IMMessage entity) {
        stmt.clearBindings();
 
        Long _Id = entity.get_Id();
        if (_Id != null) {
            stmt.bindLong(1, _Id);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String passName = entity.getPassName();
        if (passName != null) {
            stmt.bindString(4, passName);
        }
        stmt.bindLong(5, entity.getTime());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(6, content);
        }
        stmt.bindLong(7, entity.getType());
        stmt.bindLong(8, entity.getSource());
        stmt.bindLong(9, entity.getStatus());
 
        String master = entity.getMaster();
        if (master != null) {
            stmt.bindString(10, master);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public IMMessage readEntity(Cursor cursor, int offset) {
        IMMessage entity = new IMMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // passName
            cursor.getLong(offset + 4), // time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // content
            cursor.getInt(offset + 6), // type
            cursor.getInt(offset + 7), // source
            cursor.getInt(offset + 8), // status
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // master
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IMMessage entity, int offset) {
        entity.set_Id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPassName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTime(cursor.getLong(offset + 4));
        entity.setContent(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setType(cursor.getInt(offset + 6));
        entity.setSource(cursor.getInt(offset + 7));
        entity.setStatus(cursor.getInt(offset + 8));
        entity.setMaster(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(IMMessage entity, long rowId) {
        entity.set_Id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(IMMessage entity) {
        if(entity != null) {
            return entity.get_Id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(IMMessage entity) {
        return entity.get_Id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
